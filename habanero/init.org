#+TITLE: ðŸŒ¶ðŸŒ¶ðŸŒ¶ Spicemacs Organic Habanero ðŸŒ¶ðŸŒ¶ðŸŒ¶
#+AUTHOR: Xavier Capaldi

* license
MIT License
Copyright (c) 2019 Xavier Capaldi

* how-to
This is a expanded template for setting up an easy to read and configure vanilla emacs setup. 
This template includes some nice defaults and additional packages which are helpful for navigating buffers.
At the end of this document is some code which will automatically tangle this org file into your init.el file upon saving.
You should get a warning from emacs when you open this which you can safely ignore if you check the code and see that it is indeed safe.

Each code block is self-contained and I separate each package into its own block.
Since this version of Spicemacs is the bare minimum, all the packages here are required. You can add your own quite easily.
In addition, if you want to disable a block you can simply change ~:tangle yes~ to ~:tangle no~. For example:

#+begin_src emacs-lisp :tangle no
(use-package leuven-theme)
#+end_src

The above code-block will *not* be tangled into your init.el file and thus won't affect your configuration.

The packages used here absolutely wonderful and I highly recommend checking our their documentation directly.
This template is supposed to be a nice system for a modular emacs configuration. 
If you'd like some more complex example of how these packages can be combined, I suggest checking out the Habanero and Jolokia versions of Spicemacs.
They contain many examples of how these can be configured. 

* preliminaries
** package and package-archives

We don't want packages to load at startup. We want to manage them all manually later with use-package.
We can also set the package repositories here.

#+begin_src emacs-lisp :tangle yes
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("org" . "http://orgmode.org/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("marmalade" . "http://marmalade-repo.org/packages/")))
(package-initialize)
#+end_src

** bootstrap use-package

Check if use-package is installed. If not, install it. 
We also give use-package the authority to install any packages that are missing in this config from our emacs.

#+begin_src emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents) ; update package archives
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package-ensure))
(setq use-package-always-ensure t)
#+end_src

* packages
** core
*** general

A convenient method for binding keys in emacs.
We setup general's configuration using the ~:config~ wrapper here. 
This means it won't set these setting's won't take effect until the package itself is loaded.
We use spacebar (or spicebar) in the Evil-normal mode and meta-space for all other modes. 
We define only sections (with now commands) or commands which don't rely on external packages here.
We can add package specific commands in their own use-package declaration.


#+begin_src emacs-lisp :tangle yes
(use-package general
  :config
  (general-create-definer leader-def
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC")

  ;; simple commands
   (leader-def "TAB" '((lambda ()
		      (interactive)
		      (switch-to-buffer (other-buffer (current-buffer) 1)))
    :which-key "prev buffer"))

  ;; files
  (leader-def "f" '(:ignore t :which-key "files"))

  ;; buffer (note that this can be replaced by the ace-window package detailed in motion)
  (leader-def "b" '(:ignore t :which-key "buffer"))
  (leader-def "bo" '(other-window :which-key "switch window"))
  (leader-def "bk" '(kill-buffer :which-key "kill buffer"))

  ;; modes
  (leader-def "w" '(auto-fill-mode :which-key "fill mode"))

  ;; reserved keys for mode-specific bindings
  ;; navigation
  (leader-def "t" '(:ignore t :which-key "editing"))

  ;; compilation
  (leader-def "c" '(:ignore t :which-key "compilation"))

  ;; error checking
  (leader-def "x" '(:ignore t :which-key "error"))
  )
#+end_src

*** which-key

Display available keybinding in a popup.
This is an excellent package that integrates with general and removes the need to memorize keybinds.
There is no additional configuration necessary here even in more complex setups.
We will just use the wrapper in the general declarations. 

#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :init
  (which-key-mode)
  )
#+end_src

*** hydra
    
Tie related commands in a repeatable family.
This may seem unnecessary as it duplicates much of the functionality of general and which-key.
However general requires the full sequence everytime the command is run. 
For example, if you bind flycheck's next error command to SPC-p-f (Spacebar - programming - flycheck) and you want to jump three errors, you have to repeat that entire sequence three times.
With hydra you can define it as a hydra but still call it from general.
So instead of typing SPC-p-f SPC-p-f SPC-p-f you can simply type SPC-p-f f f. 
For an example, look at the ace-window configuration which uses a hydra

#+begin_src emacs-lisp :tangle yes
(use-package hydra
  )
#+end_src

*** evil

This allows the use of vim motion in emacs. 
It integrates fairly well although you will still need to know the basics of emacs.
There is no additional configuration necessary here even in more complex setups.
We also use the cursor as a visual indicator of which mode we are in.
The colors can be easily customized.

#+begin_src emacs-lisp :tangle yes 
(use-package evil
  :init
  (evil-mode)
  :config
  (setq evil-emacs-state-cursor '("red" box))
  (setq evil-normal-state-cursor '("green" box))
  (setq evil-visual-state-cursor '("orange" box))
  (setq evil-insert-state-cursor '("red" bar))
  (setq evil-replace-state-cursor '("red" bar))
  (setq evil-operator-state-cursor '("red" hollow))
  )
#+end_src

** motion and editing
*** avy

Jump to visible text using char-based decision tree.
We add shortcuts to very easily jump to the first letter of a word or a particular line.

~SPC-SPC-char~ "jump to word starting with this char"
~SPC-g~ "jump to line"

#+begin_src emacs-lisp tangle: yes
(use-package avy
  :general
  (leader-def "SPC" '(avy-goto-word-or-subword-1 :which-key "go to char"))
  (leader-def "g" '(avy-goto-line :which-key "go to line"))
  )
#+end_src

*** ace-window

Ace-window alone allows jumping to windows using char-based decision trees.
We integrate it here with a hydra along with windows movements and buffer control.   
You will notice that this doesn't use which-key in the hydra itself as it has its own functionality.
In addition, the options which are blue, denote options which will exit the hydra.

~SPC-w-char~ "jump to window starting with this char and activate hydra"

#+begin_src emacs-lisp tangle: yes
;; ace-window
;; quickly switch windows in emacs
(use-package ace-window
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?l))
  (defhydra hydra-window ()
    "window"
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("v" (lambda ()
	   (interactive)
	   (split-window-below)
	   (windmove-down))
     "vert")
    ("b" (lambda ()
	   (interactive)
	   (split-window-right)
	   (windmove-right))
     "horz")
    ("o" delete-other-windows "one" :color blue)
    ("a" ace-window "ace")
    ("s" ace-swap-window "swap")
    ("d" ace-delete-window "del")
    ("m" maximize-window "max" :color blue)
;;    ("n" ivy-switch-buffer "buf") ;; ruins modularity in this package
    ("q" nil "cancel")
    )
  :general
  (leader-def "w" '(hydra-window/ace-window :which-key "window"))
  )
#+end_src

Notice that the ivy-switch-buffer command would ruin modularity in this package.
If you like that functionality, you can reenable it but just take note.

*** ivy

Generic completion mechanism for menus.

~SPC-b-s~ "switch to buffer"

#+begin_src emacs-lisp tangle: yes
(use-package ivy
  :general
  (leader-def "bs" '(ivy-switch-buffer :which-key "switch buffer"))
  )
#+end_src
*** counsel

Provides versions of common emacs commands to make best use of ivy.

First we replace the default ~M-x~ with the counsel version which runs with an ivy backend:

~M-x~ "counsel-M-x"

Then we add shortcuts for finding files:

~SPC-f-f~ "find a file"
~SPC-f-r~ "find a recently opened file"

#+begin_src emacs-lisp tangle: yes
(use-package counsel
  :general
  ("M-x" 'counsel-M-x) ;; replace default M-x with ivy backend
  (leader-def "ff" '(counsel-find-file :which-key "find file"))
  (leader-def "fr" '(counsel-recentf :which-key "recent file"))
  )
#+end_src
*** swiper

Alternative to isearch that uses ivy to show overview of matches.
First we replace the built-in isearch with swiper:

~C-s~ "search for string in buffer"

Then make shorcut for searching with the leader:

~SPC-s~ "search for string in buffer"

#+begin_src emacs-lisp tangle: yes
(use-package swiper
  :general
  ("C-s" 'swiper) ;; search for string in current buffer
  (leader-def "s" '(swiper :which-key "search")) ;; search for string in current buffer
  )
#+end_src
*** iedit

Edit multiple occurences in text with visual feedback.

~SPC-e~ "enter and exit iedit-mode"

This command is a little unintuitive but very powerful.
Either select a region in visual mode or move the cursor over a single word.
Enter the shortcut to enter iedit-mode.
You can then modify the word.
All occurences will be modified simultaneously.
Then enter the same key sequence to exit iedit mode.

#+begin_src emacs-lisp tangle: yes
(use-package iedit
  :general
  (leader-def "e" '(iedit-mode :which-key "iedit"))
  )
  #+end_src
** appearance
*** leuven-theme

This is an excellent theme which I can highly recommend.
It is very thorough and has nice aesthetics for the most popular emacs modes.
It also has a dark mode.

#+begin_src emacs-lisp tangle: no
(use-package leuven-theme
  :init (load-theme 'leuven)
  )
#+end_src

*** rainbow-delimiters

Highlight delimiters according to depth.
We keep this always on so we can more easily distinguish our depth in delimiters.
The colors by default are quite subtle but can be modified easily.
It is set currently to automatically operate in programming modes.

#+begin_src emacs-lisp tangle: yes
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  )
#+end_src

*** highlight-indent-guides

Highlight depth of indentation.
Can be customized more thoroughly...

#+begin_src emacs-lisp tangle: yes
(use-package highlight-indent-guides
  :init (setq highlight-indent-guides-method 'column)
  :hook (prog-mode . highlight-indent-guides-mode)
  )
#+end_src

** utility
*** TODO smartparens

Minor mode for dealing with pairs.

#+begin_src emacs-lisp tangle: yes
(use-package smartparens
  :init
  (smartparens-global-mode)
  )
#+end_src

*** fill-column-indicator

This will add an indicator to your programming modes so you can see your max number of columns.
It will also automatically hard wrap.
For this to work, you must configure the column width in your programming mode package as shown below:

#+begin_src emacs-lisp tangle: no
(use-package python
  :config
  (setq default-fill-column 88) ;; wrapping text at 88th character
  )
#+end_src

#+begin_src emacs-lisp tangle: yes
(use-package fill-column-indicator
  :hook
  (prog-mode . fci-mode)
  (prog-mode . auto-fill-mode)
  )
#+end_src

** programming
* customizations

We want to setup emacs' built in version control such that all backup files go in the .emacs.d/backups folder.
In addition, we will automatically remove all backups.
  
#+begin_src emacs-lisp :tangle yes
(setq delete-old-versions -1) ; delete backup versions silently
(setq version-control t) ; use version control
(setq vc-make-backup-files t) ; make backup even when in version controlled dir
(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))) ; directory for backups
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

We just turn off the alarm and change the file defaults.

#+begin_src emacs-lisp :tangle yes
(setq vc-follow-symlinks t) ; don't ask for confirmation when opening a symlinked file
(setq inhibit-startup-screen t) ; inhibit default startup screen
(setq ring-bell-function 'ignore) ; silent bell when you make mistakes
(setq coding-system-for-read 'utf-8) ; use utf-8 by default
(setq coding-system-for-write 'utf-8)
(setq sentence-end-double-space nil) ; sentence should end with only a point
#+end_src

Remove the toolbar, menubar and scroll bars.
You may want to add these back depending upon how proficient you are with emacs.

#+begin_src emacs-lisp :tangle yes
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

We set the initial font size.

#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'default nil :height 90)
#+end_src

Enable global line numbers. 
Alternatively you can hook this to specific modes.

#+begin_src emacs-lisp :tangle yes
(global-linum-mode t)
#+end_src

* tangle .org to .el on save

This command will automatically tangle this org file into your init.el file whenever you save.
This should bring up a warning from emacs whenever you try to edit this file since you have to authorize this script to run.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
;; End:
